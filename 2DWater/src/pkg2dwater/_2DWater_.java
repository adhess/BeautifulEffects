/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg2dwater;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.awt.image.WritableRaster;
import java.io.File;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.MenuDragMouseEvent;

/**
 *
 * @author adhess
 */
public class _2DWater_ extends javax.swing.JFrame implements MouseListener {

    public static Graphics graphics;
    public static int w = 800;
    public static int h = w * 9 / 16;
    public static float[][] previous = new float[w][h];
    public static float[][] current = new float[w][h];
    public static float[][] currentcopie = new float[w][h];
    public static double damping = 0.9999999;
    public static _2DWater_ frame = new _2DWater_();
    static water a;

    /**
     * Creates new form _2DWater_
     */
    public _2DWater_() {
        initComponents();
        addMouseListener(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider1 = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSlider1.setOrientation(javax.swing.JSlider.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 390, Short.MAX_VALUE)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(_2DWater_.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(_2DWater_.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(_2DWater_.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(_2DWater_.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                frame.setVisible(true);
                frame.setLocationRelativeTo(null);
                frame.setSize(w + 23, h);
                previous[w / 2][h / 2] = 254;

                graphics = frame.getGraphics();
                new water().start();
                jSlider1.addChangeListener(new ChangeListener() {
                    @Override
                    public void stateChanged(ChangeEvent event) {
                        double value = jSlider1.getValue();
                        damping = 0.9+(value/100)*0.0999999999;
                        System.out.println(damping);
                    }
                });
            }

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JSlider jSlider1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent me) {

        System.out.println("mouseClicked");
    }
    boolean mouseP = true;

    mousePressedControl mo;

    @Override
    public void mousePressed(MouseEvent me) {
        mouseP = true;
        previous[me.getX()][me.getY()] = 255;
        //mo = new mousePressedControl(me);
        //mo.start();
    }

    @Override
    public void mouseReleased(MouseEvent me) {
        mouseP = false;
        //mo.stop();
        System.out.println("mouseReleased");
    }

    @Override
    public void mouseEntered(MouseEvent me) {
        System.out.println("mouseEntered");
    }

    @Override
    public void mouseExited(MouseEvent me) {
        System.out.println("mouseExited");
    }

    static class water extends Thread {

        public void run() {
            while (true) {
                flowWater();
            }
        }

        private void flowWater() {

            for (int i = 1; i < w - 1; i++) {
                for (int j = 1; j < h - 1; j++) {
                    current[i][j] = (previous[i][j + 1]
                            + previous[i][j - 1]
                            + previous[i + 1][j]
                            + previous[i - 1][j]) / 2 - current[i][j];
                    current[i][j] *= damping;
                }
            }
            /*for (int i = 1; i < w - 1; i++) {
             System.arraycopy(current[i], 1, previous[i], 1, h - 1 - 1);
             }*/
            for (int i = 1; i < w - 1; i++) {
                for (int j = 1; j < h - 1; j++) {
                    float aux = current[i][j];
                    current[i][j] = previous[i][j];
                    previous[i][j] = aux;
                }
            }
            BufferedImage image = new BufferedImage(w, h, BufferedImage.TYPE_INT_BGR);
            for (int i = 0; i < w; i++) {
                for (int j = 0; j < h; j++) {

                    image.setRGB(i, j, (int) current[i][j]);

                }
            }

            graphics.drawImage(image, 0, 0, null);
            //File output = new File("GrayScale.jpg");
            //ImageIO.write(image, "jpg", output);

        }

    }

    class mousePressedControl extends Thread {

        MouseEvent me;

        mousePressedControl(MouseEvent me) {
            this.me = me;
        }

        @Override
        public void run() {
            while (mouseP) {
                previous[me.getX()][me.getY()] = 255;
            }
        }
    }
}
