/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package _2dwater_rgb;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author adhess
 */
public class _2d_water_rgb extends javax.swing.JFrame implements MouseListener {

    public static Graphics graphics;
    public static int w = 800;
    public static int h = w * 9 / 16;
    public static _2d_water_rgb.data_rgb[][] previous = new _2d_water_rgb.data_rgb[w][h];
    public static _2d_water_rgb.data_rgb[][] current = new _2d_water_rgb.data_rgb[w][h];
    public static _2d_water_rgb.data_rgb[][] currentcopie = new _2d_water_rgb.data_rgb[w][h];
    public static double damping = 0.999999999;
    public static _2d_water_rgb frame = new _2d_water_rgb();

    /**
     * Creates new form _2d_water_rgb
     */
    public _2d_water_rgb() {
        initComponents();
        addMouseListener(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider1 = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSlider1.setOrientation(javax.swing.JSlider.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 390, Short.MAX_VALUE)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(_2d_water_rgb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(_2d_water_rgb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(_2d_water_rgb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(_2d_water_rgb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {

                frame.setVisible(true);
                frame.setLocationRelativeTo(null);
                frame.setSize(w + 23, h);
                frame.setTitle("2D Water RGB : Onde MÃ©canique");
                graphics = frame.getGraphics();

                for (int i = 0; i < w; i++) {
                    for (int j = 0; j < h; j++) {
                        current[i][j] = new data_rgb();
                        previous[i][j] = new data_rgb();
                        current[i][j].r = 0;
                        current[i][j].g = 0;
                        current[i][j].b = 0;
                        previous[i][j].r = 0;
                        previous[i][j].g = 0;
                        previous[i][j].b = 0;
                    }
                }
                current[w / 2 - 1][h / 2].b = 255;
                current[w / 2 + 1][h / 2].g = 255;
                new water().start();
                jSlider1.addChangeListener(new ChangeListener() {
                    @Override
                    public void stateChanged(ChangeEvent event) {
                        double value = jSlider1.getValue();
                        damping = 0.9 + (value / 100) * 0.0999999999;
                        System.out.println(damping);
                    }
                });
            }

        });
    }

    @Override
    public void mouseClicked(MouseEvent me) {

        System.out.println("mouseClicked");
    }
    boolean mouseP = true;

    @Override
    public void mousePressed(MouseEvent me) {
        mouseP = true;
        switch ((int) (Math.random() * 3)) {
            case 0:
                previous[me.getX()][me.getY()].r = 255;
                previous[me.getX()][me.getY()].g = 0;
                previous[me.getX()][me.getY()].b = 0;
                break;
            case 1:
                previous[me.getX()][me.getY()].r = 0;
                previous[me.getX()][me.getY()].g = 255;
                previous[me.getX()][me.getY()].b = 0;
                break;
            case 2:
                previous[me.getX()][me.getY()].r = 0;
                previous[me.getX()][me.getY()].g = 0;
                previous[me.getX()][me.getY()].b = 255;
                break;
        }

        //mo = new mousePressedControl(me);
        //mo.start();
    }

    @Override
    public void mouseReleased(MouseEvent me) {
        mouseP = false;
        //mo.stop();
        System.out.println("mouseReleased");
    }

    @Override
    public void mouseEntered(MouseEvent me) {
        System.out.println("mouseEntered");
    }

    @Override
    public void mouseExited(MouseEvent me) {
        System.out.println("mouseExited");
    }

    static class water extends Thread {

        @Override
        public void run() {
            while (true) {
                flowWater();
            }
        }

        private void flowWater() {
            double minR = 0;
            double minG = 0;
            double minB = 0;

            double maxR = 0;
            double maxG = 0;
            double maxB = 0;

            for (int i = 1; i < w - 1; i++) {
                for (int j = 1; j < h - 1; j++) {
                    data_rgb aux = current[i][j];
                    current[i][j] = previous[i][j];
                    previous[i][j] = aux;
                }
            }

            for (int i = 1; i < w - 1; i++) {
                for (int j = 1; j < h - 1; j++) {
                    current[i][j].r = (previous[i][j + 1].r
                            + previous[i][j - 1].r
                            + previous[i + 1][j].r
                            + previous[i - 1][j].r
                            
                            + previous[i+1][j + 1].r
                            + previous[i-1][j - 1].r
                            + previous[i + 1][j-1].r
                            + previous[i - 1][j+1].r) / 4 - current[i][j].r;
                    
                    
                    
                    current[i][j].g = (previous[i][j + 1].g
                            + previous[i][j - 1].g
                            + previous[i + 1][j].g
                            + previous[i - 1][j].g
                            + previous[i+1][j + 1].g
                            + previous[i-1][j - 1].g
                            + previous[i + 1][j-1].g
                            + previous[i - 1][j+1].g) / 4- current[i][j].g;

                    current[i][j].b = (previous[i][j + 1].b
                            + previous[i][j - 1].b
                            + previous[i + 1][j].b
                            + previous[i - 1][j].b
                            + previous[i+1][j + 1].b
                            + previous[i-1][j - 1].b
                            + previous[i + 1][j-1].b
                            + previous[i - 1][j+1].b) / 4- current[i][j].b;

                    current[i][j].r *= damping;
                    current[i][j].g *= damping;
                    current[i][j].b *= damping;

                    if (current[i][j].r < minR) {
                        minR = current[i][j].r;
                    } else if (current[i][j].r > maxR) {
                        maxR = current[i][j].r;
                    }

                    if (current[i][j].g < minG) {
                        minG = current[i][j].g;
                    } else if (current[i][j].g > maxG) {
                        maxG = current[i][j].g;
                    }

                    if (current[i][j].b < minB) {
                        minB = current[i][j].b;
                    } else if (current[i][j].b > maxB) {
                        maxB = current[i][j].b;
                    }
                }
            }
            /*for (int i = 1; i < w - 1; i++) {
             System.arraycopy(current[i], 1, previous[i], 1, h - 1 - 1);
             }*/

            BufferedImage image = new BufferedImage(w, h, BufferedImage.TYPE_USHORT_565_RGB);
            for (int i = 0; i < w; i++) {
                for (int j = 0; j < h; j++) {
                    int red = (int) current[i][j].r;
                    int blue = (int) current[i][j].b;
                    int green = (int) current[i][j].g;

                    image.setRGB(i, j, new Color(map(minR, maxR, red), map(minG, maxG, green), map(minB, maxB, blue)).getRGB());

                }
            }

            graphics.drawImage(image, 0, 0, null);
            //File output = new File("GrayScale.jpg");
            //ImageIO.write(image, "jpg", output);

        }

        int map(double min, double max, double l) {
            return (int) ((l - min) * 255 / (max - min));
        }

    }

    static class data_rgb {

        public double r;
        public double g;
        public double b;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JSlider jSlider1;
    // End of variables declaration//GEN-END:variables
}
